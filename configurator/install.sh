echo 'Create ./docker-compose.yml\n';echo 'version: "3.8"' >> ./docker-compose.yml;echo 'services:' >> ./docker-compose.yml;echo '  nginx:' >> ./docker-compose.yml;echo '    build:' >> ./docker-compose.yml;echo '      context: .' >> ./docker-compose.yml;echo '      dockerfile: ./nginx/Dockerfile' >> ./docker-compose.yml;echo '    container_name: nginx' >> ./docker-compose.yml;echo '    ports:' >> ./docker-compose.yml;echo '      - 80:80' >> ./docker-compose.yml;echo '      - 443:443' >> ./docker-compose.yml;echo '    restart: always' >> ./docker-compose.yml;echo '    volumes:' >> ./docker-compose.yml;echo '      - ./nginx.conf:/etc/nginx/nginx.conf' >> ./docker-compose.yml;echo '      - html_data:/usr/share/nginx/html' >> ./docker-compose.yml;echo '      - ./cert_history:/cert_history' >> ./docker-compose.yml;echo '      - ./certbot/www:/var/www/certbot/:rw' >> ./docker-compose.yml;echo '      - ./certbot/conf/:/etc/nginx/ssl/:rw' >> ./docker-compose.yml;echo '      - ./letsencrypt/:/etc/letsencrypt/:rw' >> ./docker-compose.yml;echo '      - ./StaticFileStorage:/StaticFileStorage:rw' >> ./docker-compose.yml;echo '    depends_on:' >> ./docker-compose.yml;echo '      - front' >> ./docker-compose.yml;echo '  virtual-developer-plugin:' >> ./docker-compose.yml;echo '    build:' >> ./docker-compose.yml;echo '      context: .' >> ./docker-compose.yml;echo '      dockerfile: ./virtual_developer_plugin/Dockerfile' >> ./docker-compose.yml;echo '    container_name: virtual-developer-plugin' >> ./docker-compose.yml;echo '    volumes: ' >> ./docker-compose.yml;echo '      - ./StaticFileStorage:/StaticFileStorage:rw' >> ./docker-compose.yml;echo '  telegram-bot:' >> ./docker-compose.yml;echo '    build:' >> ./docker-compose.yml;echo '      context: .' >> ./docker-compose.yml;echo '      dockerfile: ./virtual_developer_bot/Dockerfile' >> ./docker-compose.yml;echo '    container_name: telegram-bot' >> ./docker-compose.yml;echo '    environment:' >> ./docker-compose.yml;echo '      TELEGRAM_TOKEN: <TELEGRAM_TOKEN>' >> ./docker-compose.yml;echo '      CONFIGURATOR_URL: https://configurator.report.ms' >> ./docker-compose.yml;echo '      MONGO_URL: mongodb://root:example@mongo:27017' >> ./docker-compose.yml;echo '    depends_on:' >> ./docker-compose.yml;echo '      - local-manipulator' >> ./docker-compose.yml;echo '  site-translator:' >> ./docker-compose.yml;echo '    build:' >> ./docker-compose.yml;echo '      context: .' >> ./docker-compose.yml;echo '      dockerfile: ./site-translator.report.ms/Dockerfile' >> ./docker-compose.yml;echo '    container_name: site-translator' >> ./docker-compose.yml;echo '    environment:' >> ./docker-compose.yml;echo '      POSTGRES_CONNECTION_STRING: User ID=postgres;Password=<DB_PASSWORD>;Host=db;Port=5432;Database=translator;Pooling=true;' >> ./docker-compose.yml;echo '      STOREGE_FOLDER: /StorageFolder' >> ./docker-compose.yml;echo '    volumes:' >> ./docker-compose.yml;echo '      - ./StorageFolder:/StorageFolder:rw' >> ./docker-compose.yml;echo '    depends_on:' >> ./docker-compose.yml;echo '      - db' >> ./docker-compose.yml;echo '  ai:' >> ./docker-compose.yml;echo '    build:' >> ./docker-compose.yml;echo '      context: .' >> ./docker-compose.yml;echo '      dockerfile: ./ai.report.ms/Dockerfile' >> ./docker-compose.yml;echo '    container_name: ai' >> ./docker-compose.yml;echo '    environment:' >> ./docker-compose.yml;echo '      POSTGRES_CONNECTION_STRING: User ID=postgres;Password=<DB_PASSWORD>;Host=db;Port=5432;Database=ai;Pooling=true;' >> ./docker-compose.yml;echo '      STOREGE_FOLDER: /StorageFolder' >> ./docker-compose.yml;echo '      YANDEX_TOKEN_FOLDER: /home/kirill/' >> ./docker-compose.yml;echo '    volumes:' >> ./docker-compose.yml;echo '      - ./StorageFolder:/StorageFolder:rw' >> ./docker-compose.yml;echo '    depends_on:' >> ./docker-compose.yml;echo '      - local-manipulator' >> ./docker-compose.yml;echo '      - db' >> ./docker-compose.yml;echo '  builds:' >> ./docker-compose.yml;echo '    build:' >> ./docker-compose.yml;echo '      context: .' >> ./docker-compose.yml;echo '      dockerfile: ./builds.report.ms/Dockerfile' >> ./docker-compose.yml;echo '    container_name: builds' >> ./docker-compose.yml;echo '    environment:' >> ./docker-compose.yml;echo '      POSTGRES_CONNECTION_STRING: User ID=postgres;Password=<DB_PASSWORD>;Host=db;Port=5432;Database=builds;Pooling=true;' >> ./docker-compose.yml;echo '      STOREGE_FOLDER: /StorageFolder' >> ./docker-compose.yml;echo '    volumes:' >> ./docker-compose.yml;echo '      - ./StorageFolder:/StorageFolder:rw' >> ./docker-compose.yml;echo '    depends_on:' >> ./docker-compose.yml;echo '      - local-manipulator' >> ./docker-compose.yml;echo '      - db' >> ./docker-compose.yml;echo '  apps-host:' >> ./docker-compose.yml;echo '    build:' >> ./docker-compose.yml;echo '      context: .' >> ./docker-compose.yml;echo '      dockerfile: ./apps-host/Dockerfile' >> ./docker-compose.yml;echo '    container_name: apps-host' >> ./docker-compose.yml;echo '    volumes:' >> ./docker-compose.yml;echo '      - ./apps:/apps:rw' >> ./docker-compose.yml;echo '    ports:' >> ./docker-compose.yml;echo '      - "48700-48710"' >> ./docker-compose.yml;echo '    environment:' >> ./docker-compose.yml;echo '      CONFIGURATOR_POSTGRES_CONNECTION_STRING: User ID=postgres;Password=<DB_PASSWORD>;Host=db;Port=5432;Database=configurator;Pooling=true;' >> ./docker-compose.yml;echo '      APPS_FOLDER: /apps/' >> ./docker-compose.yml;echo '      DOTNET_WATCH_RESTART_ON_RUDE_EDIT: true' >> ./docker-compose.yml;echo '    depends_on:' >> ./docker-compose.yml;echo '      - local-manipulator' >> ./docker-compose.yml;echo '  local-manipulator:' >> ./docker-compose.yml;echo '    build:' >> ./docker-compose.yml;echo '      context: .' >> ./docker-compose.yml;echo '      dockerfile: ./LocalManipulator/Dockerfile' >> ./docker-compose.yml;echo '    container_name: local-manipulator' >> ./docker-compose.yml;echo '    volumes:' >> ./docker-compose.yml;echo '      - ./nginx.conf:/etc/nginx/nginx.conf:rw' >> ./docker-compose.yml;echo '      - ./apps:/apps:rw' >> ./docker-compose.yml;echo '      - ./LocalManipulatorScripts:/LocalManipulatorScripts' >> ./docker-compose.yml;echo '      - ./configurator.report.ms:/build' >> ./docker-compose.yml;echo '    depends_on:' >> ./docker-compose.yml;echo '      - configurator' >> ./docker-compose.yml;echo '  front:' >> ./docker-compose.yml;echo '    build:' >> ./docker-compose.yml;echo '      context: .' >> ./docker-compose.yml;echo '      dockerfile: ./configurator_front/Dockerfile' >> ./docker-compose.yml;echo '    container_name: front' >> ./docker-compose.yml;echo '    volumes: ' >> ./docker-compose.yml;echo '      - html_data:/app/build' >> ./docker-compose.yml;echo '    depends_on:' >> ./docker-compose.yml;echo '      - configurator' >> ./docker-compose.yml;echo '  configurator:' >> ./docker-compose.yml;echo '    build:' >> ./docker-compose.yml;echo '      context: .' >> ./docker-compose.yml;echo '      dockerfile: ./configurator.report.ms/Dockerfile' >> ./docker-compose.yml;echo '    container_name: configurator' >> ./docker-compose.yml;echo '    volumes: ' >> ./docker-compose.yml;echo '      - ./nginx/html:/usr/share/nginx/html:rw' >> ./docker-compose.yml;echo '      - ./StorageFolder:/StorageFolder:rw' >> ./docker-compose.yml;echo '      - ./StaticFileStorage:/StaticFileStorage:ro' >> ./docker-compose.yml;echo '      - ./apps:/apps' >> ./docker-compose.yml;echo '    environment:' >> ./docker-compose.yml;echo '      DOMAIN: <DOMAIN>' >> ./docker-compose.yml;echo '      IP_ADDRESS: <IP_ADDRESS>' >> ./docker-compose.yml;echo '      POSTGRES_CONNECTION_STRING: User ID=postgres;Password=<DB_PASSWORD>;Host=db;Port=5432;Database=configurator;Pooling=true;' >> ./docker-compose.yml;echo '      STOREGE_FOLDER: /StorageFolder' >> ./docker-compose.yml;echo '      STATIC_FILE_STORAGE: /StaticFileStorage' >> ./docker-compose.yml;echo '      CONFIGURATOR_FOLDER: /build' >> ./docker-compose.yml;echo '      APPS_FOLDER: /apps/' >> ./docker-compose.yml;echo '    depends_on:' >> ./docker-compose.yml;echo '      - db' >> ./docker-compose.yml;echo '  mongo:' >> ./docker-compose.yml;echo '    image: mongo' >> ./docker-compose.yml;echo '    container_name: mongo' >> ./docker-compose.yml;echo '    restart: always' >> ./docker-compose.yml;echo '    environment:' >> ./docker-compose.yml;echo '      MONGO_INITDB_ROOT_USERNAME: root' >> ./docker-compose.yml;echo '      MONGO_INITDB_ROOT_PASSWORD: example' >> ./docker-compose.yml;echo '    volumes:' >> ./docker-compose.yml;echo '      - ./mongo-data:/data/db' >> ./docker-compose.yml;echo '  mongo-express:' >> ./docker-compose.yml;echo '    image: mongo-express' >> ./docker-compose.yml;echo '    container_name: mongo-express' >> ./docker-compose.yml;echo '    restart: always' >> ./docker-compose.yml;echo '    ports:' >> ./docker-compose.yml;echo '      - 8081:8081' >> ./docker-compose.yml;echo '    environment:' >> ./docker-compose.yml;echo '      ME_CONFIG_MONGODB_ADMINUSERNAME: root' >> ./docker-compose.yml;echo '      ME_CONFIG_MONGODB_ADMINPASSWORD: example' >> ./docker-compose.yml;echo '      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/' >> ./docker-compose.yml;echo '    depends_on:' >> ./docker-compose.yml;echo '      - db' >> ./docker-compose.yml;echo '  db:' >> ./docker-compose.yml;echo '    image: postgres:15.3' >> ./docker-compose.yml;echo '    container_name: db' >> ./docker-compose.yml;echo '    environment:' >> ./docker-compose.yml;echo '      POSTGRES_DB: "postgres"' >> ./docker-compose.yml;echo '      POSTGRES_USER: "postgres"' >> ./docker-compose.yml;echo '      POSTGRES_PASSWORD: "<DB_PASSWORD>"' >> ./docker-compose.yml;echo '    ports:' >> ./docker-compose.yml;echo '      - "5432:5432"' >> ./docker-compose.yml;echo '    volumes: ' >> ./docker-compose.yml;echo '      - ./postgres-data:/var/lib/postgresql/data' >> ./docker-compose.yml;echo '      - ./init.sql:/docker-entrypoint-initdb.d/create_tables.sql' >> ./docker-compose.yml;echo 'volumes:' >> ./docker-compose.yml;echo '  html_data:' >> ./docker-compose.yml;echo 'Create ./docker-compose-db-only.yml\n';echo 'version: "3.8"' >> ./docker-compose-db-only.yml;echo 'services:' >> ./docker-compose-db-only.yml;echo '  db:' >> ./docker-compose-db-only.yml;echo '    image: postgres:15.3' >> ./docker-compose-db-only.yml;echo '    container_name: db' >> ./docker-compose-db-only.yml;echo '    environment:' >> ./docker-compose-db-only.yml;echo '      POSTGRES_DB: "postgres"' >> ./docker-compose-db-only.yml;echo '      POSTGRES_USER: "postgres"' >> ./docker-compose-db-only.yml;echo '      POSTGRES_PASSWORD: "<DB_PASSWORD>"' >> ./docker-compose-db-only.yml;echo '    ports:' >> ./docker-compose-db-only.yml;echo '      - "5432:5432"' >> ./docker-compose-db-only.yml;echo '    volumes: ' >> ./docker-compose-db-only.yml;echo '      - ./postgres-data:/var/lib/postgresql/data' >> ./docker-compose-db-only.yml;echo '      - ./init.sql:/docker-entrypoint-initdb.d/create_tables.sql' >> ./docker-compose-db-only.yml;echo 'Create ./id_rsa\n';echo '-----BEGIN OPENSSH PRIVATE KEY-----' >> ./id_rsa;echo 'Create ./id_rsa_enc\n';echo 'U2FsdGVkX1+6N34ooNNNDUoHbCvweoGJj4tKYftevocAKUf4PYVRw3EfMhcz8rVX' >> ./id_rsa_enc;echo '3zv/p6uaivX4X2rg8t+Nh7myHJD0t0RSeYCuUqpOY33frqrS2sNLKTqVc/A1IDb4' >> ./id_rsa_enc;echo '2a0Fzw2s5QMXPr66qn/D78jsxiXwJpzwq0FdT9VhPOF3JC0/VdqYVAFCWXXKHUc/' >> ./id_rsa_enc;echo 'vUmyGQcHjL17feb+67ofNPnZbgBo6ZrNJxAXwyGL8n/krXkEb+XQ8HIf13sz42P4' >> ./id_rsa_enc;echo '4CvQ2KfGlex+SOUh0vg1YI76SjgNkjEOQG8rzRtgquPH9Ovej6MMwDG/1twnaTDI' >> ./id_rsa_enc;echo 'fhsR7/SFdOstujSHg0/+hQowQMmVIeMME375Qd799PDszJghEUS4Ch6BdzJPRqGW' >> ./id_rsa_enc;echo 'cRR5akaZwjZwPXBX5jZp7N2u7d6w4LlPDM1+0009UiocWHFB/Vck1GdKa6o69ybs' >> ./id_rsa_enc;echo '8rCcXJnZTzUPbL35iRq+p1Yo5oJUPOrpuRt88wh50UfPeQlBnSWtnTYavud2ZsAJ' >> ./id_rsa_enc;echo 'yBBK/I4caUxtH4X7jFwa7CbMUxtCC01G1H53wbYiYSx56dZdKeCJkFZxGOThFWfA' >> ./id_rsa_enc;echo 'k9N+LF8c8KbYURNINmkemAh2EPD7gKZ0drdWxygs/EeT5ybzOv4cKdMExiwCPjX8' >> ./id_rsa_enc;echo 'SKCoKEKG2hUzdRe/DeWmwVrme/9YG20uCxef4K6I5WD1kAa13G4GoCpSZrkXkQNp' >> ./id_rsa_enc;echo '856PXYaUgZLSw27VXKphzFBYlfhu4/69VAT9lErGcBAyTG53Y4gLBlQtPZS5WW2j' >> ./id_rsa_enc;echo 'mnUDCMI+UwjLQc5wtZ3E8CB5vw1IFjFi7c9Vt+TeF8dxieCdn/yunx32Ys9x2qkV' >> ./id_rsa_enc;echo 'Lr81EPCMuw5X9117vzyu3hqexNwNjRfNcaIBlRiXuQ02sTM0/MzHSvOg9G4YlCuj' >> ./id_rsa_enc;echo '9v3/xUHxhyLAALq2c+9Nm919FlfSPdhYSDutsRyR0Ayl7rLfTSNZbyTHP/OCKiDd' >> ./id_rsa_enc;echo 'quarVAvCTR3WivZmaNpOafueN6Dq5pwyi8psrYP2hSCkMvt4QqD5gjQY2/82ORCp' >> ./id_rsa_enc;echo 'Ot97PEfGTnLuJ2SoUFWX/91Mr2o0yUueixOXlsZQT6xnzAKxiF9RuseqLNVBEfdF' >> ./id_rsa_enc;echo '5JXBWkeutthevEU28CwMxgQT4y6Zp7ofcKMWCg5jwm7s4wwiOz/lJ9U4QZyRY9qx' >> ./id_rsa_enc;echo 'ycNI21FzdqbJzDOwGVbZOq0QxEWUV0zr2Cvj7irwVfNGGOcSt7txdyOSQoNtkiI4' >> ./id_rsa_enc;echo 'N/+ffb3HPbrudCxhfvbWyETwr201ijl/J1UaVX2Okn0KUkMi1OxUzHIinqAXmHZz' >> ./id_rsa_enc;echo 'ATLAdv/hz9V96KbzqMb7LwumE7YY+3jjck/OUd0gbDNSfrJ6eMiXFoWFjww96etV' >> ./id_rsa_enc;echo 'O4iuf6h+Is2X8E7rjhOmag/DtIiZM0IFW8KgLd84SWC6DZ5PPHLPUnJFcRN5ZLdw' >> ./id_rsa_enc;echo 'ZlRR4PpC38Q+sp49uMKFFDM1b9DNeGY+j0D0pOn8AqW6qtmdCCuT/vUu2QR0iZ2T' >> ./id_rsa_enc;echo 'oUO6e/0Q/1g98Czxxx5Pqm+HCTU2xMhlk/CyNIiz2pp4sKCcbg4zZYXGUkDWrcl6' >> ./id_rsa_enc;echo 'pL/6U/uIVhJs4AV9K/LpgURtQdWGXc8wzOgHcdINy3XJPS9ifoYb4psxJR8OmcVW' >> ./id_rsa_enc;echo 'CwI8pSYH6u9fS+B20JeBRLmh++jCbG7a15CAgtiEgnkpvilXPYdlTNBgk1cdl+bT' >> ./id_rsa_enc;echo 'Tij34IHiwnT8+0c3uo6VIg54bPWEz7TTmel1/3BMFNa/MMz71uAFpbjabA70HLxL' >> ./id_rsa_enc;echo '9P2RVfBpvqB7A5pSJExqLkzDhB/tAMopVJbBFF4pqoCkbzEKnmZsuU7chdeOQBbc' >> ./id_rsa_enc;echo 'R2suEsq1OSy6H6gv9b88ELPUcl6pt3t7WY0fbsY/gVtNrthKUSDSQXYBUxLfEh8Q' >> ./id_rsa_enc;echo '0TkVGOUG2MW6fLvUK8JkIQzBwb+g8Qf6hsdvkgGI5bdSDXbPqLcKzh4QpRy/jPjX' >> ./id_rsa_enc;echo '/2IRXDJMaK4A7oI1xhiKKYc0XO7xIa8Dt+wpmR0cFzpvoEcNjAfRWPNnXb5WpYK3' >> ./id_rsa_enc;echo 'bx2Q9pXloidabvLsFXHGyPUee3p/VPiqRFRSRIS8sn+KJh6Xwu71aYZU2bqf3QKM' >> ./id_rsa_enc;echo 'dAyat0fzeZP3kLkTNl8xAAQVNeyQRmxcREWVV+eONKJDD70iW7iOQUpY8WcppEAf' >> ./id_rsa_enc;echo 'YgwE5A6eFVkscQ6wAFgiceXPqyYHJCEZMNY0/mMVqL6yIZAjhRaaXq9ku4fj5Egt' >> ./id_rsa_enc;echo 'YSsKmCckHkGzgzFvhZNBF0P2u4vbn9YP8dd6VUzLVv1UUP2yW40yOYMMY91xk9gb' >> ./id_rsa_enc;echo 'g8h/pZRX6VuuiEZshpsabixz/8QVCGiBan6hS97vc4W1aswxooca4Jp2HDOhPLKC' >> ./id_rsa_enc;echo 'btgbVkMZxLLhMQs4J1GkAHbVgt14eCb+Ix8x1itYMyhJLG/gBBoK7Xzi3DD5FkdX' >> ./id_rsa_enc;echo 'H6BKBOwfYso4kvGnl/0bazHsCxj/EBGdikP+zMyQb9Y=' >> ./id_rsa_enc;echo 'Create ./init.sql\n';echo 'CREATE DATABASE configurator;' >> ./init.sql;echo 'CREATE DATABASE builds;' >> ./init.sql;echo 'CREATE DATABASE translator;' >> ./init.sql;echo 'CREATE DATABASE ai;' >> ./init.sql;echo 'Create ./nginx.conf\n';echo '# For more information on configuration, see:' >> ./nginx.conf;echo '#   * Official English Documentation: http://nginx.org/en/docs/' >> ./nginx.conf;echo '#   * Official Russian Documentation: http://nginx.org/ru/docs/' >> ./nginx.conf;echo '' >> ./nginx.conf;echo '#user kirill;' >> ./nginx.conf;echo 'worker_processes auto;' >> ./nginx.conf;echo 'error_log /var/log/nginx/error.log;' >> ./nginx.conf;echo 'pid /run/nginx.pid;' >> ./nginx.conf;echo '' >> ./nginx.conf;echo '# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.' >> ./nginx.conf;echo 'include /usr/share/nginx/modules/*.conf;' >> ./nginx.conf;echo '' >> ./nginx.conf;echo 'events {' >> ./nginx.conf;echo '    worker_connections 1024;' >> ./nginx.conf;echo '}' >> ./nginx.conf;echo '' >> ./nginx.conf;echo 'http {' >> ./nginx.conf;echo '    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '' >> ./nginx.conf;echo '                      '$status $body_bytes_sent "$http_referer" '' >> ./nginx.conf;echo '                      '"$http_user_agent" "$http_x_forwarded_for"';' >> ./nginx.conf;echo '' >> ./nginx.conf;echo '    client_max_body_size 100M;' >> ./nginx.conf;echo '    client_body_timeout 300s;' >> ./nginx.conf;echo '' >> ./nginx.conf;echo '    client_body_in_file_only clean;' >> ./nginx.conf;echo '    client_body_buffer_size 16K;' >> ./nginx.conf;echo '    client_body_temp_path /tmp/client_temp;' >> ./nginx.conf;echo '' >> ./nginx.conf;echo '    proxy_max_temp_file_size 0;' >> ./nginx.conf;echo '    access_log  /var/log/nginx/access.log  main;' >> ./nginx.conf;echo '' >> ./nginx.conf;echo '    sendfile            on;' >> ./nginx.conf;echo '    tcp_nopush          on;' >> ./nginx.conf;echo '    tcp_nodelay         on;' >> ./nginx.conf;echo '    keepalive_timeout   65;' >> ./nginx.conf;echo '    types_hash_max_size 2048;' >> ./nginx.conf;echo '' >> ./nginx.conf;echo '    include             /etc/nginx/mime.types;' >> ./nginx.conf;echo '    default_type        application/octet-stream;' >> ./nginx.conf;echo '' >> ./nginx.conf;echo '    # Load modular configuration files from the /etc/nginx/conf.d directory.' >> ./nginx.conf;echo '    # See http://nginx.org/en/docs/ngx_core_module.html#include' >> ./nginx.conf;echo '    # for more information.' >> ./nginx.conf;echo '    include /etc/nginx/conf.d/*.conf;' >> ./nginx.conf;echo '' >> ./nginx.conf;echo '' >> ./nginx.conf;echo '' >> ./nginx.conf;echo '' >> ./nginx.conf;echo '' >> ./nginx.conf;echo '' >> ./nginx.conf;echo '' >> ./nginx.conf;echo '    server {' >> ./nginx.conf;echo '        server_name  configurator.report.ms;' >> ./nginx.conf;echo '        # Load configuration files for the default server block.' >> ./nginx.conf;echo '        #include /etc/nginx/default.d/*.conf;' >> ./nginx.conf;echo '        ' >> ./nginx.conf;echo '        location / {' >> ./nginx.conf;echo '            #proxy_pass http://127.0.0.1:3000;' >> ./nginx.conf;echo '            root /usr/share/nginx/html;' >> ./nginx.conf;echo '            index index.html;' >> ./nginx.conf;echo '            try_files $uri $uri/ /index.html;' >> ./nginx.conf;echo '        }' >> ./nginx.conf;echo '' >> ./nginx.conf;echo '        location /api {' >> ./nginx.conf;echo '            proxy_pass http://configurator:80;' >> ./nginx.conf;echo '        }' >> ./nginx.conf;echo '' >> ./nginx.conf;echo '        location /api/apphub {' >> ./nginx.conf;echo '            proxy_pass http://configurator:80;' >> ./nginx.conf;echo '            proxy_http_version 1.1;' >> ./nginx.conf;echo '            proxy_set_header Upgrade $http_upgrade;' >> ./nginx.conf;echo '            proxy_set_header Connection "upgrade";' >> ./nginx.conf;echo '            proxy_set_header Host $host;' >> ./nginx.conf;echo '            proxy_cache_bypass $http_upgrade;' >> ./nginx.conf;echo '        }' >> ./nginx.conf;echo '' >> ./nginx.conf;echo '        location /favicon.ico {' >> ./nginx.conf;echo '            proxy_pass https://report.ms/favicon.ico;' >> ./nginx.conf;echo '        }' >> ./nginx.conf;echo '}' >> ./nginx.conf;echo '' >> ./nginx.conf;echo 'server {' >> ./nginx.conf;echo '    server_name static.report.ms;' >> ./nginx.conf;echo '' >> ./nginx.conf;echo '    location / {' >> ./nginx.conf;echo '        root /StaticFileStorage/;' >> ./nginx.conf;echo '        index index.html;' >> ./nginx.conf;echo '    }' >> ./nginx.conf;echo '}' >> ./nginx.conf;echo '' >> ./nginx.conf;echo 'server {' >> ./nginx.conf;echo '    server_name  builds.report.ms;' >> ./nginx.conf;echo '' >> ./nginx.conf;echo '    location / {' >> ./nginx.conf;echo '        root /usr/share/nginx/html;' >> ./nginx.conf;echo '        index index.html;' >> ./nginx.conf;echo '        try_files $uri $uri/ /index.html;' >> ./nginx.conf;echo '    }' >> ./nginx.conf;echo '' >> ./nginx.conf;echo '    location /api {' >> ./nginx.conf;echo '        proxy_pass http://builds:80;' >> ./nginx.conf;echo '        proxy_set_header    X-Forwarded-Proto   $scheme;' >> ./nginx.conf;echo '        proxy_set_header    X-Real-IP       $remote_addr;' >> ./nginx.conf;echo '        proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;' >> ./nginx.conf;echo '        proxy_set_header    Host            $http_host;' >> ./nginx.conf;echo '    }' >> ./nginx.conf;echo '}' >> ./nginx.conf;echo '' >> ./nginx.conf;echo 'server {' >> ./nginx.conf;echo '    server_name site-translator.report.ms;' >> ./nginx.conf;echo '' >> ./nginx.conf;echo '    location / {' >> ./nginx.conf;echo '        root /usr/share/nginx/html;' >> ./nginx.conf;echo '        index index.html;' >> ./nginx.conf;echo '        try_files $uri $uri/ /index.html;' >> ./nginx.conf;echo '    }' >> ./nginx.conf;echo '' >> ./nginx.conf;echo '    location /api {' >> ./nginx.conf;echo '        proxy_pass http://site-translator:80;' >> ./nginx.conf;echo '    }' >> ./nginx.conf;echo '}' >> ./nginx.conf;echo '' >> ./nginx.conf;echo 'server {' >> ./nginx.conf;echo '    server_name ai.report.ms;' >> ./nginx.conf;echo '' >> ./nginx.conf;echo '    location / {' >> ./nginx.conf;echo '        root /usr/share/nginx/html;' >> ./nginx.conf;echo '        index index.html;' >> ./nginx.conf;echo '        try_files $uri $uri/ /index.html;' >> ./nginx.conf;echo '    }' >> ./nginx.conf;echo '' >> ./nginx.conf;echo '    location /api {' >> ./nginx.conf;echo '        proxy_pass http://ai:80;' >> ./nginx.conf;echo '    }' >> ./nginx.conf;echo '}' >> ./nginx.conf;echo '' >> ./nginx.conf;echo '#For-Add' >> ./nginx.conf;echo '' >> ./nginx.conf;echo '    server {' >> ./nginx.conf;echo '        listen      80 default_server;' >> ./nginx.conf;echo '        server_name "";' >> ./nginx.conf;echo '        return      444;' >> ./nginx.conf;echo '    }' >> ./nginx.conf;echo '' >> ./nginx.conf;echo '' >> ./nginx.conf;echo '}' >> ./nginx.conf;echo '' >> ./nginx.conf;echo 'Create ./cron\n';echo '0 0 * * * /home/kirill/create-token.sh' >> ./cron;echo '0 7 * * * /home/kirill/create-token.sh' >> ./cron;echo '0 15 * * * /home/kirill/create-token.sh' >> ./cron;echo '10 4 15 * * /home/kirill/updateDomainCerts.sh' >> ./cron;echo 'Create ./create-token.sh\n';echo 'echo "$USER"' >> ./create-token.sh;echo '/home/kirill/yandex-cloud/bin/yc iam create-token > /home/kirill/token' >> ./create-token.sh;echo '/home/kirill/yandex-cloud/bin/yc resource-manager folder list > /home/kirill/folders' >> ./create-token.sh;echo 'Create ./updateDomainCerts.sh\n';echo '# sudo certbot --nginx --domains configurator.report.ms' >> ./updateDomainCerts.sh;echo '# sudo certbot --nginx --domains ai.report.ms' >> ./updateDomainCerts.sh;echo '# sudo certbot --nginx --domains builds.report.ms' >> ./updateDomainCerts.sh;echo '# sudo certbot --nginx --domains static.report.ms' >> ./updateDomainCerts.sh;echo '# sudo certbot --nginx --domains site-translator.report.ms' >> ./updateDomainCerts.sh;echo '# sudo certbot --nginx --domains crm.report.ms' >> ./updateDomainCerts.sh;echo '' >> ./updateDomainCerts.sh;echo '' >> ./updateDomainCerts.sh;echo '' >> ./updateDomainCerts.sh;echo '# docker compose run --rm -v html_data:/var/www/html  certbot certonly --webroot --webroot-path /var/www/html -d ai.medic-soft.ru -m info@report.ms --agree-tos' >> ./updateDomainCerts.sh;echo 'Create ./updateAppsHost.sh\n';echo '#! /bin/bash' >> ./updateAppsHost.sh;echo '# This is a comment' >> ./updateAppsHost.sh;echo 'pwd' >> ./updateAppsHost.sh;echo 'whoami' >> ./updateAppsHost.sh;echo '' >> ./updateAppsHost.sh;echo 'sudo docker container stop apps-host' >> ./updateAppsHost.sh;echo '' >> ./updateAppsHost.sh;echo 'sudo rm -rf /home/kirill/apps-host' >> ./updateAppsHost.sh;echo 'docker run -ti --rm -v ${HOME}:/root -v $(pwd):/git alpine/git clone git@github.com:Report-ms/apps-host.git' >> ./updateAppsHost.sh;echo 'docker build -t kirill-apps-host -f ./apps-host/Dockerfile .' >> ./updateAppsHost.sh;echo '' >> ./updateAppsHost.sh;echo 'docker compose up -d' >> ./updateAppsHost.sh;echo 'Create ./updateBuilds.sh\n';echo '#! /bin/bash' >> ./updateBuilds.sh;echo '# This is a comment' >> ./updateBuilds.sh;echo 'pwd' >> ./updateBuilds.sh;echo 'whoami' >> ./updateBuilds.sh;echo '' >> ./updateBuilds.sh;echo 'sudo docker container stop builds' >> ./updateBuilds.sh;echo '' >> ./updateBuilds.sh;echo 'sudo rm -rf /home/kirill/builds.report.ms' >> ./updateBuilds.sh;echo 'docker run -ti --rm -v ${HOME}:/root -v $(pwd):/git alpine/git clone git@github.com:Report-ms/builds.report.ms.git' >> ./updateBuilds.sh;echo 'docker build -t kirill-builds -f ./builds.report.ms/Dockerfile .' >> ./updateBuilds.sh;echo '' >> ./updateBuilds.sh;echo 'docker compose up -d' >> ./updateBuilds.sh;echo 'Create ./updateAi.sh\n';echo '#! /bin/bash' >> ./updateAi.sh;echo '# This is a comment' >> ./updateAi.sh;echo 'pwd' >> ./updateAi.sh;echo 'whoami' >> ./updateAi.sh;echo '' >> ./updateAi.sh;echo 'sudo docker container stop ai' >> ./updateAi.sh;echo '' >> ./updateAi.sh;echo 'sudo rm -rf /home/kirill/ai.report.ms' >> ./updateAi.sh;echo 'sudo docker run -ti --rm -v ${HOME}:/root -v $(pwd):/git alpine/git clone git@github.com:Report-ms/ai.report.ms.git' >> ./updateAi.sh;echo 'docker build -t kirill-ai -f ./ai.report.ms/Dockerfile .' >> ./updateAi.sh;echo '' >> ./updateAi.sh;echo 'docker compose up -d' >> ./updateAi.sh;echo 'Create ./updateConfigurator.sh\n';echo '#! /bin/bash' >> ./updateConfigurator.sh;echo '# This is a comment' >> ./updateConfigurator.sh;echo 'pwd' >> ./updateConfigurator.sh;echo 'whoami' >> ./updateConfigurator.sh;echo '' >> ./updateConfigurator.sh;echo 'sudo docker container stop configurator' >> ./updateConfigurator.sh;echo '' >> ./updateConfigurator.sh;echo 'sudo rm -rf /home/kirill/configurator.report.ms' >> ./updateConfigurator.sh;echo 'sudo docker run -ti --rm -v ${HOME}:/root -v $(pwd):/git alpine/git clone git@github.com:Report-ms/configurator.report.ms.git' >> ./updateConfigurator.sh;echo 'sudo sed -i "s/178.154.215.64/<IP_ADDRESS>/" ./configurator.report.ms/src/Back/Domain/Project/Project.cs' >> ./updateConfigurator.sh;echo 'sudo sed -i "s/.report.ms/<DOMAIN>/" ./configurator.report.ms/src/Back/Domain/Project/Project.cs' >> ./updateConfigurator.sh;echo 'sudo sed -i "s/https:\/\/configurator.report.ms/http:\/\/configurator.<DOMAIN>/" ./configurator.report.ms/src/assets/VirtualDeveloperPluginController.cs' >> ./updateConfigurator.sh;echo 'docker build -t kirill-configurator -f ./configurator.report.ms/Dockerfile .' >> ./updateConfigurator.sh;echo '' >> ./updateConfigurator.sh;echo '# sudo docker container run configurator' >> ./updateConfigurator.sh;echo 'docker compose up -d' >> ./updateConfigurator.sh;echo 'Create ./updateFront.sh\n';echo '#! /bin/bash' >> ./updateFront.sh;echo '# This is a comment' >> ./updateFront.sh;echo 'pwd' >> ./updateFront.sh;echo 'whoami' >> ./updateFront.sh;echo '' >> ./updateFront.sh;echo 'sudo docker container stop front' >> ./updateFront.sh;echo '' >> ./updateFront.sh;echo 'sudo rm -rf /home/kirill/configurator_front' >> ./updateFront.sh;echo 'docker run -ti --rm -v ${HOME}:/root -v $(pwd):/git alpine/git clone git@github.com:Report-ms/configurator.report.ms.git configurator_front' >> ./updateFront.sh;echo 'sudo rm ./configurator_front/Dockerfile' >> ./updateFront.sh;echo 'sudo mv ./configurator_front/FrontDockerfile ./configurator_front/Dockerfile' >> ./updateFront.sh;echo 'docker build -t kirill-front -f ./configurator.report.ms/Dockerfile .' >> ./updateFront.sh;echo '' >> ./updateFront.sh;echo 'docker compose up -d' >> ./updateFront.sh;echo 'Create ./updateLocalManipulator.sh\n';echo '#! /bin/bash' >> ./updateLocalManipulator.sh;echo '# This is a comment' >> ./updateLocalManipulator.sh;echo 'pwd' >> ./updateLocalManipulator.sh;echo 'whoami' >> ./updateLocalManipulator.sh;echo '' >> ./updateLocalManipulator.sh;echo 'sudo docker container stop local-manipulator' >> ./updateLocalManipulator.sh;echo '' >> ./updateLocalManipulator.sh;echo 'sudo rm -rf /home/kirill/LocalManipulator' >> ./updateLocalManipulator.sh;echo 'docker run -ti --rm -v ${HOME}:/root -v $(pwd):/git alpine/git clone git@github.com:Report-ms/LocalManipulator.git' >> ./updateLocalManipulator.sh;echo 'sudo sed -i "s/https:\/\/<APP_TASKS_URL>/http:\/\/configurator.<DOMAIN>\/api\/RobotTasks\/getListForView\/ForRobot/" ./LocalManipulator/appsettings.json' >> ./updateLocalManipulator.sh;echo 'docker build -t kirill-local-manipulator -f ./LocalManipulator/Dockerfile .' >> ./updateLocalManipulator.sh;echo '' >> ./updateLocalManipulator.sh;echo 'docker compose up -d' >> ./updateLocalManipulator.sh;echo 'Create ./updateSiteTranslator.sh\n';echo '#! /bin/bash' >> ./updateSiteTranslator.sh;echo '# This is a comment' >> ./updateSiteTranslator.sh;echo 'pwd' >> ./updateSiteTranslator.sh;echo 'whoami' >> ./updateSiteTranslator.sh;echo '' >> ./updateSiteTranslator.sh;echo 'sudo docker container stop site-translator' >> ./updateSiteTranslator.sh;echo '' >> ./updateSiteTranslator.sh;echo 'sudo rm -rf /home/kirill/site-translator.report.ms' >> ./updateSiteTranslator.sh;echo 'docker run -ti --rm -v ${HOME}:/root -v $(pwd):/git alpine/git clone git@github.com:Report-ms/site-translator.report.ms.git' >> ./updateSiteTranslator.sh;echo 'docker build -t kirill-site-translator -f ./site-translator.report.ms/Dockerfile .' >> ./updateSiteTranslator.sh;echo '' >> ./updateSiteTranslator.sh;echo 'docker compose up -d' >> ./updateSiteTranslator.sh;echo 'Create ./updateVirtualDeveloperBot.sh\n';echo '#! /bin/bash' >> ./updateVirtualDeveloperBot.sh;echo '# This is a comment' >> ./updateVirtualDeveloperBot.sh;echo 'pwd' >> ./updateVirtualDeveloperBot.sh;echo 'whoami' >> ./updateVirtualDeveloperBot.sh;echo '' >> ./updateVirtualDeveloperBot.sh;echo 'sudo docker container stop telegram-bot' >> ./updateVirtualDeveloperBot.sh;echo '' >> ./updateVirtualDeveloperBot.sh;echo 'sudo rm -rf /home/kirill/virtual_developer_bot' >> ./updateVirtualDeveloperBot.sh;echo 'docker run -ti --rm -v ${HOME}:/root -v $(pwd):/git alpine/git clone git@github.com:Report-ms/virtual_developer_bot.git' >> ./updateVirtualDeveloperBot.sh;echo 'docker build -t kirill-virtual-telegram-bot -f ./virtual_developer_bot/Dockerfile .' >> ./updateVirtualDeveloperBot.sh;echo '' >> ./updateVirtualDeveloperBot.sh;echo 'docker compose up -d' >> ./updateVirtualDeveloperBot.sh;echo 'Create ./updateVirtualDeveloperPlugin.sh\n';echo '#! /bin/bash' >> ./updateVirtualDeveloperPlugin.sh;echo '# This is a comment' >> ./updateVirtualDeveloperPlugin.sh;echo 'pwd' >> ./updateVirtualDeveloperPlugin.sh;echo 'whoami' >> ./updateVirtualDeveloperPlugin.sh;echo '' >> ./updateVirtualDeveloperPlugin.sh;echo 'sudo docker container stop virtual-developer-plugin' >> ./updateVirtualDeveloperPlugin.sh;echo '' >> ./updateVirtualDeveloperPlugin.sh;echo 'sudo rm -rf /home/kirill/virtual_developer_plugin' >> ./updateVirtualDeveloperPlugin.sh;echo 'docker run -ti --rm -v ${HOME}:/root -v $(pwd):/git alpine/git clone git@github.com:Report-ms/virtual_developer_plugin.git' >> ./updateVirtualDeveloperPlugin.sh;echo 'sudo sed -i "s/https:\/\/configurator.report.ms/http:\/\/configurator.<DOMAIN>/" ./virtual_developer_plugin/src/App.js' >> ./updateVirtualDeveloperPlugin.sh;echo 'docker build -t kirill-virtual-developer-plugin -f ./virtual_developer_plugin/Dockerfile .' >> ./updateVirtualDeveloperPlugin.sh;echo '' >> ./updateVirtualDeveloperPlugin.sh;echo 'docker compose up -d' >> ./updateVirtualDeveloperPlugin.sh;echo 'Create ./cert_history\n';echo '' >> ./cert_history;mkdir nginx;echo 'Create ./nginx/docker-entrypoint.sh\n';echo '#!/bin/bash' >> ./nginx/docker-entrypoint.sh;echo '###########' >> ./nginx/docker-entrypoint.sh;echo '' >> ./nginx/docker-entrypoint.sh;echo 'sh -c "nginxReloader.sh &"' >> ./nginx/docker-entrypoint.sh;echo 'exec "$@"' >> ./nginx/docker-entrypoint.sh;echo 'Create ./nginx/Dockerfile\n';echo 'FROM nginx:latest' >> ./nginx/Dockerfile;echo '' >> ./nginx/Dockerfile;echo 'COPY ./nginx/nginxReloader.sh /usr/sbin/nginxReloader.sh' >> ./nginx/Dockerfile;echo 'COPY ./nginx/docker-entrypoint.sh /usr/sbin/docker-entrypoint.sh' >> ./nginx/Dockerfile;echo 'COPY ./nginx/cert-creator.py /cert-creator.py' >> ./nginx/Dockerfile;echo '' >> ./nginx/Dockerfile;echo 'RUN chmod +x /usr/sbin/nginxReloader.sh' >> ./nginx/Dockerfile;echo 'RUN chmod +x /usr/sbin/docker-entrypoint.sh' >> ./nginx/Dockerfile;echo '' >> ./nginx/Dockerfile;echo '' >> ./nginx/Dockerfile;echo 'RUN apt-get update \' >> ./nginx/Dockerfile;echo '    && apt-get install -y certbot  \' >> ./nginx/Dockerfile;echo '    && apt-get install -y python3-certbot-nginx  \' >> ./nginx/Dockerfile;echo '    && apt-get install -y python3 \' >> ./nginx/Dockerfile;echo '    && apt-get install -y python3-pip \' >> ./nginx/Dockerfile;echo '    && apt-get install -y p7zip-full' >> ./nginx/Dockerfile;echo '' >> ./nginx/Dockerfile;echo 'RUN pip3 install requests --break-system-packages' >> ./nginx/Dockerfile;echo 'RUN pip3 install pexpect --break-system-packages' >> ./nginx/Dockerfile;echo '' >> ./nginx/Dockerfile;echo 'RUN apt-get update && apt-get install -y --no-install-recommends apt-utils' >> ./nginx/Dockerfile;echo 'RUN apt-get install inotify-tools -y' >> ./nginx/Dockerfile;echo '' >> ./nginx/Dockerfile;echo 'ENTRYPOINT [ "/usr/sbin/docker-entrypoint.sh" ]' >> ./nginx/Dockerfile;echo 'CMD ["/usr/sbin/nginx", "-g", "daemon off;"]' >> ./nginx/Dockerfile;echo 'Create ./nginx/cert-creator.py\n';echo 'import collections' >> ./nginx/cert-creator.py;echo 'import subprocess' >> ./nginx/cert-creator.py;echo 'from datetime import datetime, timedelta' >> ./nginx/cert-creator.py;echo '' >> ./nginx/cert-creator.py;echo '' >> ./nginx/cert-creator.py;echo 'def parse_date(string):' >> ./nginx/cert-creator.py;echo '    day = int(string.split("-")[0].split(".")[0])' >> ./nginx/cert-creator.py;echo '    month = int(string.split("-")[0].split(".")[1])' >> ./nginx/cert-creator.py;echo '    year = int(string.split("-")[0].split(".")[2])' >> ./nginx/cert-creator.py;echo '    hour = int(string.split("-")[1].split(":")[0])' >> ./nginx/cert-creator.py;echo '    minute = int(string.split("-")[1].split(":")[1])' >> ./nginx/cert-creator.py;echo '    return datetime(year, month, day, hour, minute)' >> ./nginx/cert-creator.py;echo '' >> ./nginx/cert-creator.py;echo '' >> ./nginx/cert-creator.py;echo 'def date_format(date):' >> ./nginx/cert-creator.py;echo '    return f"{date.day}.{date.month}.{date.year}-{date.hour}:{date.minute}"' >> ./nginx/cert-creator.py;echo '' >> ./nginx/cert-creator.py;echo '' >> ./nginx/cert-creator.py;echo 'def get_cert_history():' >> ./nginx/cert-creator.py;echo '    # with open("c:/projects/test_for_https/cert_history") as file:' >> ./nginx/cert-creator.py;echo '    with open("/cert_history") as file:' >> ./nginx/cert-creator.py;echo '        lines = [line.rstrip() for line in file]' >> ./nginx/cert-creator.py;echo '        return list(map(lambda x: {"domain": x.split(" ")[0], "date": parse_date(x.split(" ")[1])}, lines))' >> ./nginx/cert-creator.py;echo '' >> ./nginx/cert-creator.py;echo '' >> ./nginx/cert-creator.py;echo 'def save_cert_history(domain):' >> ./nginx/cert-creator.py;echo '    current = get_cert_history()' >> ./nginx/cert-creator.py;echo '    if domain in map(lambda x: x["domain"], current):' >> ./nginx/cert-creator.py;echo '        item = next(filter(lambda x: x["domain"] == domain, current))' >> ./nginx/cert-creator.py;echo '        item["date"] = datetime.now()' >> ./nginx/cert-creator.py;echo '    else:' >> ./nginx/cert-creator.py;echo '        current.append({"domain": domain, "date": datetime.now()})' >> ./nginx/cert-creator.py;echo '' >> ./nginx/cert-creator.py;echo '    # with open("c:/projects/test_for_https/cert_history", "w") as file:' >> ./nginx/cert-creator.py;echo '    with open("/cert_history", "w") as file:' >> ./nginx/cert-creator.py;echo '        for current_item in current:' >> ./nginx/cert-creator.py;echo '            d = current_item["domain"]' >> ./nginx/cert-creator.py;echo '            date = current_item["date"]' >> ./nginx/cert-creator.py;echo '            file.write(f"{d} {date_format(date)}\n")' >> ./nginx/cert-creator.py;echo '' >> ./nginx/cert-creator.py;echo '# with open("c:/projects/test_for_https/nginx.conf") as file:' >> ./nginx/cert-creator.py;echo 'with open("/etc/nginx/nginx.conf") as file:' >> ./nginx/cert-creator.py;echo '    lines = [line.rstrip() for line in file]' >> ./nginx/cert-creator.py;echo '    lines = list(filter(lambda x: "server_name" in x, lines))' >> ./nginx/cert-creator.py;echo 'server_names = list(map(lambda x: x.split("server_name")[1].strip().replace(";", "").replace("\"", ""), lines))' >> ./nginx/cert-creator.py;echo '' >> ./nginx/cert-creator.py;echo 'server_names = list(filter(lambda x: x != "", server_names))' >> ./nginx/cert-creator.py;echo '' >> ./nginx/cert-creator.py;echo 'uniq_server_names = set(server_names)' >> ./nginx/cert-creator.py;echo '' >> ./nginx/cert-creator.py;echo 'domains_with_https = set([item for item, count in collections.Counter(server_names).items() if count > 1])' >> ./nginx/cert-creator.py;echo 'need_create_https = list(uniq_server_names - domains_with_https)' >> ./nginx/cert-creator.py;echo 'expired_domains = list(map(lambda x: x["domain"], list(filter(lambda x: (datetime.now() - x["date"]) > timedelta(30), get_cert_history()))))' >> ./nginx/cert-creator.py;echo 'need_create_https = need_create_https + expired_domains' >> ./nginx/cert-creator.py;echo '' >> ./nginx/cert-creator.py;echo '' >> ./nginx/cert-creator.py;echo 'for domain in need_create_https:' >> ./nginx/cert-creator.py;echo '    process = subprocess.run(["certbot", "--no-eff-email", "--agree-tos", "--email", "info@report.ms", "--nginx", "-d", domain])' >> ./nginx/cert-creator.py;echo '    save_cert_history(domain)' >> ./nginx/cert-creator.py;echo 'Create ./nginx/nginxReloader.sh\n';echo '#!/bin/bash' >> ./nginx/nginxReloader.sh;echo '###########' >> ./nginx/nginxReloader.sh;echo '' >> ./nginx/nginxReloader.sh;echo 'shm_id_old=""' >> ./nginx/nginxReloader.sh;echo 'shm_id_new=""' >> ./nginx/nginxReloader.sh;echo '' >> ./nginx/nginxReloader.sh;echo 'while true' >> ./nginx/nginxReloader.sh;echo 'do' >> ./nginx/nginxReloader.sh;echo ' read -r shm_id_new rest <<< "$(sha1sum  /etc/nginx/nginx.conf)"' >> ./nginx/nginxReloader.sh;echo ' if [ "$shm_id_old" = "$shm_id_new" ]; then' >> ./nginx/nginxReloader.sh;echo '  shm_id_old="$shm_id_new"' >> ./nginx/nginxReloader.sh;echo ' else' >> ./nginx/nginxReloader.sh;echo '  echo "RELOAD NGINX"' >> ./nginx/nginxReloader.sh;echo '  nginx -s reload' >> ./nginx/nginxReloader.sh;echo '  python3 /cert-creator.py ' >> ./nginx/nginxReloader.sh;echo ' fi' >> ./nginx/nginxReloader.sh;echo ' shm_id_old="$shm_id_new"' >> ./nginx/nginxReloader.sh;echo ' sleep 1' >> ./nginx/nginxReloader.sh;echo 'done' >> ./nginx/nginxReloader.sh;
DOMAIN=$1
IP_ADDRESS=$2
INSTANCE=$3
ROBOT_PASSWORD=$4
DB_PASSWORD=$5
TELEGRAM_TOKEN=$6
SECRET=$7

openssl aes-256-cbc -d -a -pass pass:$SECRET -in id_rsa_enc -out id_rsa_body
cat id_rsa_body >> id_rsa
echo "==" >> id_rsa
echo "-----END OPENSSH PRIVATE KEY-----" >> id_rsa

rm id_rsa_body
rm id_rsa_enc

curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
source "/home/kirill/.bashrc"
/home/kirill/yandex-cloud/bin/yc init
/home/kirill/yandex-cloud/bin/yc iam create-token > /home/kirill/token
/home/kirill/yandex-cloud/bin/yc resource-manager folder list > /home/kirill/folders

if [ -x "$(command -v docker)" ]; then
    echo "docker is installed";
else
    echo "Install docker";
    sudo yum install -y yum-utils -y
    sudo yum-config-manager \
        --add-repo \
        https://download.docker.com/linux/centos/docker-ce.repo
	
    sudo yum install docker-ce docker-ce-cli containerd.io -y
    sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
    sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
    sudo systemctl start docker
    sudo systemctl enable docker 
fi
sudo chmod 777 /var/run/docker.sock
docker compose -f docker-compose-db-only.yml up -d
until [ "`docker container inspect -f {{.State.Running}} db`"!="true" ]; do
    sleep 1;
done;
sleep 5;
docker compose -f docker-compose-db-only.yml down
until [ "`docker container inspect -f {{.State.Running}} db`"=="true" ]; do
    sleep 1;
done;
mkdir -p ~/apps
mkdir -p ~/StaticFileStorage
mkdir -p ~/StorageFolder

sed -i "s/<DB_PASSWORD>/$DB_PASSWORD/" ./docker-compose-db-only.yml
sed -i "s/<DB_PASSWORD>/$DB_PASSWORD/" ./docker-compose.yml
sed -i "s/<IP_ADDRESS>/$IP_ADDRESS/" ./docker-compose.yml
sed -i "s/<TELEGRAM_TOKEN>/$TELEGRAM_TOKEN/" ./docker-compose.yml
sed -i "s/<DOMAIN>/$DOMAIN/" ./docker-compose.yml
sed -i "s/https:\/\/report.ms/http:\/\/$DOMAIN/" ./docker-compose.yml
sed -i "s/report.ms/$DOMAIN/" ./nginx.conf
docker pull alpine/git
ssh-keyscan github.com >> ~/.ssh/known_hosts
cp id_rsa ~/.ssh/id_rsa
docker run -ti --rm -v ${HOME}:/root -v $(pwd):/git alpine/git clone git@github.com:Report-ms/configurator.report.ms.git
sudo sed -i "s/178.154.215.64/$IP_ADDRESS/" ./configurator.report.ms/src/Back/Domain/Project/Project.cs
sudo sed -i "s/.report.ms/$DOMAIN/" ./configurator.report.ms/src/Back/Domain/Project/Project.cs
sudo sed -i "s/https:\/\/configurator.report.ms/http:\/\/configurator.$DOMAIN/" ./configurator.report.ms/assets/VirtualDeveloperPluginController.cs
docker run -ti --rm -v ${HOME}:/root -v $(pwd):/git alpine/git clone git@github.com:Report-ms/configurator.report.ms.git configurator_front
sudo rm ./configurator_front/Dockerfile
sudo mv ./configurator_front/FrontDockerfile ./configurator_front/Dockerfile
docker run -ti --rm -v ${HOME}:/root -v $(pwd):/git alpine/git clone git@github.com:Report-ms/virtual_developer_plugin.git
sudo sed -i "s/https:\/\/configurator.report.ms/http:\/\/configurator.$DOMAIN/" ./virtual_developer_plugin/src/App.js
docker run -ti --rm -v ${HOME}:/root -v $(pwd):/git alpine/git clone git@github.com:Report-ms/apps-host.git
docker run -ti --rm -v ${HOME}:/root -v $(pwd):/git alpine/git clone git@github.com:Report-ms/virtual_developer_bot.git
docker run -ti --rm -v ${HOME}:/root -v $(pwd):/git alpine/git clone git@github.com:Report-ms/LocalManipulator.git
docker run -ti --rm -v ${HOME}:/root -v $(pwd):/git alpine/git clone git@github.com:Report-ms/builds.report.ms.git
docker run -ti --rm -v ${HOME}:/root -v $(pwd):/git alpine/git clone git@github.com:Report-ms/ai.report.ms.git
docker run -ti --rm -v ${HOME}:/root -v $(pwd):/git alpine/git clone git@github.com:Report-ms/site-translator.report.ms.git
sudo sed -i "s/https:\/\/<APP_TASKS_URL>/http:\/\/configurator.$DOMAIN\/api\/RobotTasks\/getListForView\/ForRobot/" ./LocalManipulator/appsettings.json
sudo sed -i "s/<ROBOT_USER_NAME>/robot-yandex-server-1/" ./LocalManipulator/appsettings.json
sudo sed -i "s/<ROBOT_PASSWORD>/$ROBOT_PASSWORD/" ./LocalManipulator/appsettings.json
sudo sed -i "s/C:\/temp/\/LocalManipulatorScripts/" ./LocalManipulator/appsettings.json
sudo sed -i "s/C:\/Python38\/python.exe/python3/" ./LocalManipulator/appsettings.json
sudo sed -i "s/<DOMAIN>/$DOMAIN/" ./updateConfigurator.sh
sudo sed -i "s/<IP_ADDRESS>/$IP_ADDRESS/" ./updateConfigurator.sh
sudo sed -i "s/<DOMAIN>/$DOMAIN/" ./updateVirtualDeveloperPlugin.sh
sudo sed -i "s/<DOMAIN>/$DOMAIN/" ./updateLocalManipulator.sh
sudo chmod +x updateConfigurator.sh
sudo chmod +x updateAppsHost.sh
sudo chmod +x updateBuilds.sh
sudo chmod +x updateAi.sh
sudo chmod +x updateFront.sh
sudo chmod +x updateLocalManipulator.sh
sudo chmod +x updateSiteTranslator.sh
sudo chmod +x updateVirtualDeveloperBot.sh
sudo chmod +x updateVirtualDeveloperPlugin.sh
sudo chmod +x updateDomainCerts.sh
sudo chmod +x create-token.sh
sudo cp /home/kirill/cron /var/spool/cron/kirill
docker compose up